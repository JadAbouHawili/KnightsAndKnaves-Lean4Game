msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Thu Oct 10 19:03:27 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Doc.doc
msgid "Unfoldable:\n"
"unfold Not at ...\n"
"¬¨P is P ‚Üí False"
msgstr ""

#: Game.Doc.doc
msgid "`rfl` is short for reflexivity. In the context of numbers, it is the property that for any number `a`, `a = a`.\n"
"\n"
"More generally, the `rfl` tactic will close all goals of the form `X=X`, regardless of what `X` is, `X=Y` where `X` and `Y` are identical. rfl can also prove the equality of two things that are 'equal by definition'.\n"
"\n"
"In fact, `rfl` is not a tactic but syntactic sugar for `exact rfl`. `rfl` is of type `a = a` for any `a`.\n"
"## examples\n"
"```\n"
"x - 7 = x - 7\n"
"```\n"
"`rfl` will close this goal."
msgstr ""

#: Game.Doc.doc
msgid "testing stuff, does importing work?!?!?!?!"
msgstr ""

#: Game.Doc.doc
msgid "[[mathlib_doc]]"
msgstr ""

#: Game.Doc.doc
msgid "## Overview\n"
"Having h : P and P as your goal, exact h will close the goal. exact h asserts that h is exactly whats needed to prove the goal which makes sense because h is a proof of P.(It doesn't matter what P is)"
msgstr ""

#: Game.Doc.doc
msgid "Normalize numerical expressions. Supports the operations `+` `-` `*` `/` `‚Åª¬π` `^` and `%`\n"
"over numerical types such as `‚Ñï`, `‚Ñ§`, `‚Ñö`, `‚Ñù`, `‚ÑÇ`."
msgstr ""

#: Game.Doc.doc
msgid "# Truth table\n"
"The truth table of a logical connective illustrates the rule for that logical connective , i.e the truth value of the compound statement depending on the truth value of the propositions it connects.\n"
"The following truth table illustrates this for the previously discussed `‚àß` connective.\n"
"`T` stands for true\n"
"`F` stands for false\n"
"$\n"
"\\begin{array}{|c c|c|} \n"
"\\hline\n"
"P & Q & P ‚àß Q \\\\\n"
"\\hline\n"
"T & T & T \\\\\n"
"T & F & F \\\\\n"
"F & T & F \\\\\n"
"F & F & F \\\\\n"
"\\hline\n"
"\\end{array}\n"
"$\n"
"Notice that `P ‚àß Q` is true when both `P` is true and `Q` is true, being false otherwise."
msgstr ""

#: Game.Levels.EquationalReasoning.L01_rfl
msgid "A Number Equals Itself"
msgstr ""

#: Game.Levels.EquationalReasoning.L01_rfl
msgid "In this exercise, we will prove `2 = 2`\n"
"\n"
"`rfl` will do the job.\n"
"\n"
"`rfl` is short for reflexivity, which is the property that for any number `a`, `a = a`\n"
"\n"
"`rfl` also applies more generally, `rfl` will close any goal of the form `A=B` where `A`,`B` are identical. If needed, `rfl` will unfold both sides into their definitions and then check if they are equal. In other words, `rfl` can prove the equality of two things that are 'equal by definition'."
msgstr ""

#: Game.Levels.EquationalReasoning.L01_rfl
msgid "Notice that 'level completed! üéâ' on the bottom. We say that the goal is closed/proven."
msgstr ""

#: Game.Levels.EquationalReasoning.L02_exact
msgid "Introd"
msgstr ""

#: Game.Levels.EquationalReasoning.L02_exact
msgid "In this level, we have `Objects`, `Assumptions`, and the `Goal`.\n"
"\n"
"# Objects\n"
"Objects will always be variables(letter symbols) we are working with. What these variables denote is specified after the `:`, what is after the `:` is called the type of the object.  \n"
"\n"
"Here, `x`  denotes a number but we don't know which number it is. The `: ‚Ñï` in `x : ‚Ñï` means that `x` is a variable of type natural number(positive numbers like `1`,`2`,`3`, and so on...). \n"
"\n"
"# Assumptions\n"
"As for the assumptions, we have `h : x=2` which means that `h` is an object of type `x=2`. This essentially means that `h` is an object asserting that the proposition(or statement) `x=2` is true. In other words, we know that `x=2` and `h` is a proof of that. \n"
"\n"
"# Goal\n"
"Our goal is to prove that `x = 2`.\n"
"Always look at the assumptions which represent everything you know. Well, we already have that `h` is a proof of the goal. \n"
"We should let Lean know. Using `exact h` accomplishes this."
msgstr ""

#: Game.Levels.EquationalReasoning.L02_exact
msgid "The `exact` in `exact h` tells Lean that `h`'s type EXACTLY matches the goal. Lean verifies this and reports that there are no more goals to prove. We are done."
msgstr ""

#: Game.Levels.EquationalReasoning.L02_exact
msgid ""
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "Substituting Variables By Their Values"
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "We will learn how to substitute a variable with its value, for example how to substitiute `x` by `2` if we know that `x=2`.\n"
"\n"
"This can be done using the tactic `rw` (short for rewrite).\n"
"\n"
"`rw` takes a term of type `A=B` and replaces all the `A`s in the goal with `B`s.\n"
"So `rw [h]` where `h : x=3` will replace all the `x`s of the goal with `3`."
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "Do `rw [¬´{h}¬ª]` or `rw [¬´{g}¬ª]` and observe what happens."
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "You should use `¬´{h}¬ª` now."
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "`rw [h]`"
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "You should use `¬´{g}¬ª` now."
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "`rw [g]`"
msgstr ""

#: Game.Levels.EquationalReasoning.L03_rw
msgid "Our goal is now `3 + 3 = 6`. The `rw` tactic implicitly executes `rfl` after doing the rewrite which unfolds the numbers `3` and `6` to what they are defined as, and it turns out both sides are identical. I would recommend the natural number game if you want to learn more.\n"
"\n"
"Another solution:\n"
"```\n"
"rw [h,g]\n"
"```\n"
"instead of \n"
"```\n"
"rw [h]\n"
"rw [g]\n"
"```"
msgstr ""

#: Game.Levels.EquationalReasoning.L04_Normalize
msgid "Normalize Equations"
msgstr ""

#: Game.Levels.EquationalReasoning.L04_Normalize
msgid "In this level, we will learn about normalizing equations using the `norm_num` tactic.\n"
"\n"
"`norm_num` is short for normalize numerical expressions like carrying out calculations and simplifying the expression.\n"
"\n"
"We will also learn how to apply a tactic to an assumption instead of the goal.\n"
"\n"
"We want to use `norm_num` on `h`, so simply write `norm_num at h`."
msgstr ""

#: Game.Levels.EquationalReasoning.L04_Normalize
msgid "This should look familiar to a previous exercise. Now `h` looks exactly like the goal. Let Lean know that `h`'s type EXACTLY matches the goal. !!"
msgstr ""

#: Game.Levels.EquationalReasoning.L04_Normalize
msgid "Remember the `exact` tactic? Try `exact h`."
msgstr ""

#: Game.Levels.EquationalReasoning.L04_Normalize
msgid ""
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "some title"
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "Here we introduce the `have` tactic which allows to add theorems to the context(which you would have to prove, of course). The `mul_left_cancel‚ÇÄ` will not be used in future levels, but is given here for the sake of having a familiar example.\n"
"\n"
"Proving the goal will go as follows:\n"
"\n"
"1- Prove that `16=4*4`\n"
"\n"
"2- Replace the `16` in `h` by `4*4`\n"
"\n"
"3- Cancel the `4` on both sides of `h` obtaining `y=4` which is the goal. (using the theorem `mul_left_cancel‚ÇÄ`)\n"
"\n"
"Step 1: ***Proving `16=4*4`***.\n"
"We need to construct an object of type `16 = 4 * 4`. Lean does not have such an object in its math library so we will have to prove it ourselves and add it to the current proof state. \n"
"This is exactly what `have` does, which obeys the following syntax:\n"
"```\n"
"`have name-of-object : type := by ...` \n"
"```\n"
"where `...` is the proof.\n"
"`name-of-object` can be whatever you want, leaving it empty would  give the theorem a name automatically. The `type` in this case is the statement we want to prove , i.e `16=4*4`. For the proof, we need to carry out the calculation of `4 * 4` and as in the previous level, the tactic for that is `norm_num`. Typing that as the proof will work."
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "Now we want to replace the `16` in `h` with `4 * 4`."
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "`rw [¬´{helper}¬ª] at h`"
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "Now that we have `4` on both sides, we want to cancel this `4`\n"
"\n"
"This is possible using the theorem `mul_left_cancel‚ÇÄ` which has the following type :\n"
"```\n"
"mul_left_cancel‚ÇÄ(ha : a ‚â† 0) (h : a * b = a * c) : b = c\n"
"```\n"
"`mul_left_cancel‚ÇÄ` takes two arguments which are:\n"
"- a proof that what you want to cancel is not equal to zero (in this case `a`).\n"
"- the equation you are working with.\n"
"The theorem then cancels `a` from both sides giving a proof of `b=c`. This is exactly what we want to prove the goal.\n"
"\n"
"To write the subscript in `mul_left_cancel‚ÇÄ`, do backslash zero. \\0 `mul_left_cancel‚ÇÄ` is written as `mul_left_cancel\\0`\n"
"Lean has the theorem `four_ne_zero : 4‚â†0` which you need."
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "Notice that `mul_left_cancel‚ÇÄ four_ne_zero h` has type `y = 4`. So, `exact mul_left_cancel‚ÇÄ four_ne_zero h` will do it."
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid ""
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "[[mathlib_doc]]"
msgstr ""

#: Game.Levels.EquationalReasoning.L05_mul_left_cancel
msgid "### **Logic Constants & Operators**\n"
"### **Equational Reasoning**\n"
"| $Name~~~$ | $Ascii~~~$ | $Unicode$ | $Unicode Cmd$ |\n"
"| --- | :---: | :---: | --- |\n"
"|     |       |       | `mul_left_cancel\\0`|\n"
"| True | `True` |  |  |\n"
"| False | `False` |  |  |\n"
"| Not | `Not` | ¬¨ | `\\n` `\\not` `\\neg` `\\lnot` |\n"
"| And | `/\\` | ‚àß | `\\and` `\\an` `\\wedge` |\n"
"| Or | `\\/` | ‚à® | `\\v` `\\or` `\\vee` |\n"
"| Implies | `->` | ‚Üí | `\\r` `\\imp` `\\->` `\\to` `\\r-` `\\rightarrow` |\n"
"| Iff | `<->` | ‚Üî | `\\iff` `\\lr-` `\\lr` `\\<->` `\\leftrightarrow` |\n"
"| For All | `foral` | ‚àÄ | `\\all` `\\forall` |\n"
"| Exists | `exists` | ‚àÉ | `\\ex` `\\exists` |\n"
"\n"
"### **Other Unicode**\n"
"| $Name$ | $Unicode~~~$ | $Unicode Cmd$ |\n"
"| --- | :---: | --- |\n"
"| Angle brackets | ‚ü® ‚ü© | `\\<` `\\>` `\\langle` `\\rangle` |\n"
"| Subscript Numbers | ‚ÇÅ ‚ÇÇ ‚ÇÉ ... | `\\1` `\\2` `\\3` ... |\n"
"| Left Arrow | ‚Üê | `\\l` `\\leftarrow` `\\gets` `\\<-` |\n"
"| Turnstyle | ‚ä¢ | `\\‚îÇ-` `\\entails` `\\vdash` `\\goal` |\n"
"\n"
"$\n"
"\\begin{array}{|c|c|} \n"
"\\hline\n"
"Unicode & Text \\\\\n"
"\\hline\n"
"\\text{mul\\_left\\_cancel‚ÇÄ} & `mul\\_left\\_cancel\\0` \\\\\n"
"\\hline\n"
"\\end{array}\n"
"$\n"
"mul_left_cancel‚ÇÄ written as mul_left_cancel\\0"
msgstr ""

#: Game.Levels.EquationalReasoning
msgid "Equational Reasoning"
msgstr ""

#: Game.Levels.EquationalReasoning
msgid "In this world, you will learn how to solve equations."
msgstr ""

#: Game.Levels.LogicTruthValue_.L03_Intro
msgid "Intro"
msgstr ""

#: Game.Levels.LogicTruthValue_.L03_Intro
msgid "This should look familiar. `hP` is of type `P` and `P` is of type `Prop`. So, `hP` is a proof of `P`. Our goal is to prove `P`. The type of `hP` EXACTLY matches the goal.\n"
"\n"
"`hP` 'exactly' matches the goal. `hP` is 'exactly' what you need to close the goal. This is to emphasize that for the tactic `exact h`, the type of h doesn't matter."
msgstr ""

#: Game.Levels.LogicTruthValue_.L03_Intro
msgid "Type `exact hP`!"
msgstr ""

#: Game.Levels.LogicTruthValue_.L03_Intro
msgid "Notice that `hQ` and `hR` were not used. We couldn't use them in any case because `Q` and `R` are not related to `P`. In the next levels, we will discuss how to construct new propositions from old ones which would in a sense depend on the old ones."
msgstr ""

#: Game.Levels.LogicTruthValue_.L03_Intro
msgid "You can think of a proposition as a statement that is either true or false(obviously, it can't be both at the same time).\n"
"\n"
"For an object of type P where P is of type Prop, i.e `h : P` where `P : Prop`, `h` would be a proof or a witness that `P` is true. Equivalently, from `h` we can construct a term `h' := eq_true h of type `h' : P = True` which would be a proof that P is true as well. Both perspectives are interchangeable and equivalent."
msgstr ""

#: Game.Levels.LogicTruthValue_.L05_And
msgid "And"
msgstr ""

#: Game.Levels.LogicTruthValue_.L05_And
msgid "# Building New Propositions From Previous Ones\n"
"In this world, you will also learn how to construct new propositions by connecting other propositions with logical connectives. \n"
"The logical connective presented here is `‚àß` read as 'and'.\n"
"\n"
"Remember the example given at the beginning of the world. We restate it here:\n"
"Denoting `x=2` by `P` and `4*y=16` by `Q`, we can construct a new proposition `P ‚àß Q` which is read as `x=2 and 4*y=16`. \n"
"\n"
"What is the truth value of this new proposition `x=2 and 4*y=16`? Well, it would depend on the truth value of `x=2` ,`4*y=16`. What possibilities is there for each's truth value? `x=2` can either be true or false and similarly for `4*y=16`. Here is a truth table that goes through all these possibilities: \n"
"truthtable. Refer to the documentation in the right side pane.\n"
"\n"
"Obviously, this proposition is true if `x=2` is true AND `4*y=16` is true. In other words, if `P` is true AND `Q` is true. This is how things work regarless of what `P` is, what `Q` is.\n"
"In logic, for `P,Q` propositions, `P and Q` is true when both `P` is true and `Q` is true, being false otherwise.\n"
"\n"
"In this level, we have that `P` is true,`Q` is true. We want to construct a proof that `P ‚àß Q` is true. \n"
"The `And` introduction rule will enable us to prove statements involving `‚àß`.\n"
"To do this, we introduce the `‚àß` introduction rule which is used to deal with a goal involving `‚àß`:\n"
"```\n"
"  And.intro  (left : P) (right : Q) : P ‚àß Q\n"
"```\n"
"`And.intro` takes a proof of `P`, a proof of `Q`, and transforms/evaulates them to a proof of `P ‚àß Q` where `P Q : Prop`.\n"
"Notice that `And.intro hP hQ` has type `P ‚àß Q` which is EXACTLY the goal. Let Lean know."
msgstr ""

#: Game.Levels.LogicTruthValue_.L05_And
msgid "Try `exact And.intro hP hQ` or `constructor`"
msgstr ""

#: Game.Levels.LogicTruthValue_.L05_And
msgid "The constructor tactic transformed the goal `P ‚àß Q` into two subgoals the first being `P` and the second being `Q`. This way of doing things matches the meaning of the `‚àß` connective."
msgstr ""

#: Game.Levels.LogicTruthValue_.L05_And
msgid "Notice that the goal is now `P`"
msgstr ""

#: Game.Levels.LogicTruthValue_.L05_And
msgid "After closing the goal `P`, you now have to close the goal `Q`"
msgstr ""

#: Game.Levels.LogicTruthValue_.L05_And
msgid ""
msgstr ""

#: Game.Levels.LogicTruthValue_.L07_Or
msgid "Or, `‚à®`"
msgstr ""

#: Game.Levels.LogicTruthValue_.L07_Or
msgid "In this level, we introduce the `‚à®` logical connective read as 'or'.\n"
"\n"
"left, apply Or.inl are the same thing.\n"
"There are two `‚à®` introduction rules: \n"
"The goal involves `‚à®`, and so (similar to `‚àß`) we need to use an introduction rule. Specifically, the `Or` introduction rule. \n"
"There are two introduction rules:\n"
"```\n"
"Or.intro_left (b : Prop) (h : a) : a ‚à® b\n"
"```\n"
"- `Or.intro_right`\n"
"```\n"
"Or.intro_right (a : Prop) (h : b) : a ‚à® b\n"
"```\n"
"\n"
"Pick the appropriate one."
msgstr ""

#: Game.Levels.LogicTruthValue_.L07_Or
msgid "Notice that in the type of `Or.intro_left`, you need to explicitly give the type that will be used to the right of the `‚à®` but you don't need to do this for the type to the left of `‚à®`. How does Lean what to do? Well, the type of `Or.intro_left` is in fact:\n"
"```\n"
"Or.intro_left {a : Prop} (b : Prop) (h : a) : a ‚à® b\n"
"```\n"
"The only difference is the curly braces. This means that `a` is an implicit argument. In other words, you don't need to give it explicitly, Lean will deduce it from the type of `h`. For example, if `h:P` where `P:Prop` then Lean will know that `a` is `P` and will put `P` to the left of `‚à®`.\n"
"\n"
"A similar explanation applies to `Or.intro_right` which has the type:\n"
"```\n"
"Or.intro_right {b : Prop} (a : Prop) (h : b) : a ‚à® b\n"
"```\n"
"\n"
"You can avoid entering both `a` or `b` explicitly and instead use: \n"
"```\n"
"Or.inl {a b : Prop} (h : a) : a ‚à® b\n"
"Or.inr {a b : Prop} (h : b) : a ‚à® b\n"
"```"
msgstr ""

#: Game.Levels.LogicTruthValue_.L09_Implication
msgid "Implication, ‚Üí"
msgstr ""

#: Game.Levels.LogicTruthValue_.L09_Implication
msgid "In this leve, we introduce the logical implication `‚Üí` connective.\n"
"Logical implication `P ‚Üí Q` is made up of two components:\n"
"- The premise, which in this case is `P`\n"
"- The conclusion, which in this case is `Q`\n"
"\n"
"What logical implication does is that it takes evidence or proof for `P` and transforms it returning a proof of `Q`.\n"
"The truth of `P` IMPLIES the truth of `Q`. A proof of `P` IMPLIES a proof of `Q`.\n"
"\n"
"# truth table\n"
"explain\n"
"```\n"
"| P | Q | P ‚Üí Q  |\n"
"|---|---|--------|\n"
"| T | T |   T    |\n"
"| T | F |   F    |\n"
"| F | T |   T    |\n"
"| F | F |   T    |\n"
"```\n"
"\n"
"A statement `P ‚Üí Q` is false when `P` is true and `Q` false, it's true otherwise."
msgstr ""

#: Game.Levels.LogicTruthValue_.L09_Implication
msgid "This is what is called an inference rule. It has two assumptions, `p : P` , `ptoq : P ‚Üí Q` and the conclusion `Q`. It is an inference rule because we 'infer' a certain conclusion from assumptions or already established theorems.\n"
"Usually presented in this format:"
msgstr ""

#: Game.Levels.LogicTruthValue_.L09_Implication
msgid "no lean docstring avaialble\n"
"\n"
"# truth table\n"
"$\n"
"\\begin{array}{|c c|c|} \n"
"\\hline\n"
"P & Q & P ‚Üí Q \\\\\n"
"\\hline\n"
"T & T & T \\\\\n"
"T & F & F \\\\\\\\\n"
"F & T & T \\\\\\\\\n"
"F & F & T \\\\\\\\\n"
"\\hline\n"
"\\end{array}\n"
"$"
msgstr ""

#: Game.Levels.LogicTruthValue_.L11_Not
msgid "Not Connective, ¬¨"
msgstr ""

#: Game.Levels.LogicTruthValue_.L11_Not
msgid "Another way to say that `P = False` is by saying `¬¨P = True`. These two statements say the same thing. This is how we will define `¬¨`.\n"
"`¬¨` is defined to satisfy the following properties:\n"
"`(P = True) ‚Üí (¬¨P = False)`\n"
"`(P = False) ‚Üí (¬¨P = True)`\n"
"If `P` is True, then `¬¨P` is False.\n"
"If `P` is False, then `¬¨P` is True.\n"
"\n"
"If `¬¨P` is False, then `P` is True.\n"
"If `¬¨P` is False, then `P` is True.\n"
"\n"
"Two nots give a true. Double negatives. Two negatives make/resolve into a positive.\n"
"\n"
"Intuitvely, this fits how negation or 'not' works in language.\n"
"\n"
"Notice that this is the first logical connective that applies on one proposition only and not two.\n"
"\n"
"If `P` then `False`.\n"
"\n"
"------\n"
"this is enough\n"
"$\n"
"\\begin{array}{|c c|c|} \n"
"\\hline\n"
"a & b & F \\\\\n"
"\\hline\n"
"0 & 0 & 0 \\\\\n"
"0 & 1 & 0 \\\\\n"
"1 & 0 & 0 \\\\\n"
"1 & 1 & 1 \\\\\n"
"\\hline\n"
"\\end{array}\n"
"$\n"
"\n"
"`¬¨P` in Lean is defined as `P ‚Üí False`. What this means is that we obtain `¬¨P` by assuming `P` and deriving a contradiction i.e constructing an object of type `False`. \n"
"\n"
"In this level, we have that `P ‚àß ¬¨P` is true. This means that `P`,`¬¨P` which is `P ‚Üí False` is true. `¬¨P` being true tells us that a proof of `P` gives us a proof of `False. We have a proof of `P`. Therefore we can obtain a proof of `False` which is the goal.\n"
"\n"
"---------------------------------\n"
"The empty type. It has no constructors.\n"
"`False` is the empty proposition, thus it has no introduction rule. It represents a contradiction. Finding a \n"
"What is a contradiction? Well, it is a propostional statement that is false for all possible values of its variables. Constructing a term(i.e a proof) of this type is proving something that is false. The standard example of a contradiction is the following: \n"
"\n"
"$\n"
"\\begin{array}{|c|c|} \n"
"\\hline\n"
"P & ¬¨P & P ‚àß ¬¨P\\\\\n"
"\\hline\n"
"T & F & F \\\\\n"
"F & T & F \\\\\n"
"\\hline\n"
"\\end{array}\n"
"$\n"
"\n"
"Another meaning for the term contradiction to refer to the assertion or proof of a propositional statement that is false for all possible values of its variables. We will use both interchangeably. So, deriving a contradiction means constructing such a proof.\n"
"\n"
"# What is `False` exactly? \n"
"\n"
"## How to prove `False` and what are the consequences? -- this has been introduced in the previous level...\n"
"This is what you did in the previous level. This section is just reiterating that point. \n"
"\n"
"Well, when was the first time you saw `False`?\n"
"\n"
"Here:\n"
"'\n"
"Negation of a proposition `P`, denoted `¬¨P`, is defined as `P ‚Üí False`. \n"
"'\n"
"It should be clear that to get to false, you would need to prove `¬¨P`, and `P`. Then given such a proof state:\n"
"```\n"
"hnP : ¬¨P\n"
"hP : P\n"
"```\n"
"we can obtain false by `hnP hP`.\n"
"Proving a proposition and its negation is a special case of 'deriving a contradiction' because we have proven `p ‚àß ¬¨p` which is always false. A logical system that has this quality is called an inconsistent system.\n"
"\n"
"## Principle of explosion\n"
"Moreover, `False` has no introduction rule , so the reasoning described above is the only way to obtain an object of type `False`. If you were able to find `h:False` i.e prove `False` then our system is worthless because we can prove anything. To reiterate, such a system would be called an inconsistent system because of a contradiction.\n"
"\n"
"-- rules of inference like modus ponens need to be emphasized to make this understsanble. Also we can make the user prove the principle of explosion using modus ponens.\n"
"will be discussed in previous, but the basic idea is that if you have in your proof state an `h` such that `h:False` then you can prove any proposition you want. In other words, within this proof state, all propositions are true. This is obviously absurd because it would mean for every proposition `p`, `p` is true and also `¬¨p` is true.\n"
"\n"
"So this is pretty good because now you can effortlessly prove anything you want!!!!! But this is also pretty bad because you can't really trust any of the results you obtain within an inconsistent system, can you?"
msgstr ""

#: Game.Levels.LogicTruthValue_.L11_Not
msgid ""
msgstr ""

#: Game.Levels.LogicTruthValue_.L12_False
msgid "asdf"
msgstr ""

#: Game.Levels.LogicTruthValue_.L12_False
msgid "We proved `False`, what does this mean? What can we conclude? What does `False` IMPLY?\n"
"Let's check the `‚Üí` truth table:\n"
"truthtable\n"
"we have that the implication `False ‚Üí Q` is true regardless whether `Q` is true or is false. \n"
"So `False` implies anything. From contradiction anything follows.\n"
"\n"
"\n"
"\n"
"----\n"
"\n"
"Our goal is to prove `False`. This looks problematic from the get go, and we will go into the details of that in this level. But, let's first go discuss what `False` is as a type.\n"
"\n"
"\n"
"`False` is an 'empty' type that has no introduction rule. Then how can we prove `False`? Now explain negation and stuff.... We know that `False ‚â† True` and its proof in Lean is:\n"
"```\n"
"false_ne_true : False ‚â† True\n"
"```\n"
"i.e ¬¨(False = True) which is read as: 'it is not the case that `False = True`'.\n"
"In this proof state, we can prove that `False = True`. Replace the `p` in `hp` by `False` using `hnp`.\n"
"\n"
"\n"
"`False` is the empty proposition. Thus, it has no introduction rules.\n"
"It represents a contradiction. `False` elimination rule, `False.rec`,\n"
"expresses the fact that anything follows from a contradiction.\n"
"This rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\n"
"or the principle of explosion.\n"
"For more information: [Propositional Logic](https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n"
"\n"
"Proving `False` means deriving a contradiction. So, to prove `¬¨p` , you must assume `p` and derive a contradiction. We will explain in more detail what is meant by 'contradiction'.\n"
"----------------------------\n"
"# Truth Table\n"
"We want an operator which flips the value of a proposition `P`. Lets call this operator `Not` represented as `¬¨`. In other words, if `P` were true then `¬¨P` would be false and vice versa. \n"
"Note that `¬¨P` is also a proposition, so `¬¨ (¬¨P)` is a valid expression. Moreover, `¬¨ (¬¨P)` is a proposition so `¬¨ (¬¨ (¬¨P))` or `¬¨¬¨¬¨P` is a valid expression (and so on).\n"
"\n"
"\n"
"This is what the truth table would look like.\n"
"$$\n"
"\\begin{array}{|c|c|} \n"
"\\hline\n"
"P & ¬¨P \\\\\n"
"\\hline\n"
"T & F  \\\\\n"
"F & T  \\\\\n"
"\\hline\n"
"\\end{array}\n"
"$$\n"
"\n"
"But we don't need to introduce a new symbol, it can be defined in terms of what we already know.\n"
"Defining `¬¨P` as `P ‚Üí False` would accomplish this. \n"
"$\n"
"\\begin{array}{|c|c|} \n"
"\\hline\n"
"P & P ‚Üí False \\\\\n"
"\\hline\n"
"T & F  \\\\\n"
"F & T  \\\\\n"
"\\hline\n"
"\\end{array}\n"
"$\n"
"Notice that this definition is an implication which you have learned to deal with in the previous level and that the truth table with `¬¨P` and the truth table with `P ‚Üí False` are identical which means that the implication definition captures what we want `¬¨` to mean.\n"
"\n"
"# Natural Language Example\n"
"Let `P` denote the assertion 'Today is Monday'. `¬¨P` would then denote the assertion 'Today is not Monday'. You could also say that `¬¨P` denotes 'Today is Tuesday or Wednsday or Thursday or Friday or Saturday or Sunday'. Both assertions express the same thing (assuming there are 7 days of the week and these are their names) so either one is acceptable.\n"
"\n"
"# Contradictions\n"
"Now we can construct propositional statements that are always false regardless of the values of their propositional variables. Having such a statement in your proof state would allow you to construct a term of type `False`. \n"
"\n"
"Such a statement is called a contradiction and is equal to `False` regardless of the proof state. Moreover, it is not something we assume to be true but something that is always true.\n"
"--------------------------------\n"
"# Defining `¬¨`\n"
"\n"
"## But what is `False` exactly?(now we know what `False` is from the truth value perspective so this would need a rewrite in logic world, no it doesn't because we were dealing with `= False` but now we are dealing with `‚Üí False`).\n"
"For now, just know that `False` is a type that has no introduction rule and that proving `False` means deriving a contradiction. So, to prove `¬¨p` , you must assume `p` and derive a contradiction. We will explain in more detail what is meant by 'contradiction'.\n"
"\n"
"To emphasize the fact that negation is an implication, you have to go through this simple level."
msgstr ""

#: Game.Levels.LogicTruthValue_.L12_False
msgid "If you feel like seeing the implication definition of ¬¨ in the proof state would provide more clarity and make it easier to solve upcoming problems, you can always unfold ¬¨ to its implication form. Try `unfold Not at hnp`."
msgstr ""

#: Game.Levels.LogicTruthValue_.L12_False
msgid "Now, this is just like the previous level"
msgstr ""

#: Game.Levels.LogicTruthValue_.L12_False
msgid "In the next level, we will explore what it means to have proven `False`(pretty bad, or pretty good depending on how you look at it)."
msgstr ""

#: Game.Levels.LogicTruthValue_.L12_False
msgid ""
msgstr ""

#: Game.Levels.LogicTruthValue_
msgid "Logic Truth Value_"
msgstr ""

#: Game.Levels.LogicTruthValue_
msgid "-- these are the most important points that need to be focused on but switching to a truth value perspective disrupts this... truth value perspective should be introduced to show the brute force way of solving knights and knaves puzzles.\n"
"In this world, we will be dealing with `Objects` of type `Prop` i.e propositions. You can think of a proposition as a statement that is either true or false(obviously, it can't be both at the same time). You have seen propositions before like `x=2`, `4*y=16` etc..\n"
"\n"
"We construct new propositions from old ones. For example, denoting `x=2` by `P` and `4*y=16` by `Q`, we can construct a new proposition `P ‚àß Q` which is read as `x=2 and 4*y=16`. \n"
"\n"
"Having an object `h` of type `P` where `P` is of type `Prop` means that `h` is a proof of `P`. You have seen a special case of this for `x=2` for example, but this applies for any proposition.\n"
"\n"
"-----------------------------\n"
"This world will heavily rely on the truth table perspective of propositions and the various logical connective to provide an intuitive foundation for explaining the validity of various rules in propositional logic. 'Propositions' will be explained here, and the rest will be hinted at here but fully explained throught the levels.\n"
"\n"
"# quick overview\n"
"\n"
"## proving statements involving logical connectives\n"
"This will involve using inference rules that are intuitively true from the truth table perspective. \n"
"\n"
"## unpacking information from a complicated propositional statement\n"
"\n"
"# shifting between the two perspectives"
msgstr ""

#: Game.Levels.LogicAlternative.L01_assumption
msgid "`assumption` tactic"
msgstr ""

#: Game.Levels.LogicAlternative.L01_assumption
msgid "Let's introduce the first 'automation' tactic. \n"
"The point behind such tactics is that there are tedious patterns of reasoning and automation tactics alleviate the burden of having to spell them out into Lean every time. \n"
"\n"
"Automations will sacrifice ... for brevity which is less tedious but might be more obfuscated.\n"
"\n"
"One pattern of reasoning you will almost always encounter is having an assumption of a type that 'exactly' matches the goal. The `exact` tactic suggests itself here, but you could just write `assumption`. The `assumption` tactic will use the assumptions in the proof state to prove the goal.\n"
"\n"
"Try it out!"
msgstr ""

#: Game.Levels.LogicAlternative.L01_assumption
msgid "Informally, the `assumption` tactic looks through the assumptions in the proof state and tries to find one which has a type that matches the goal through the assumptions in the proof state and tries to find one that which has a type that matches the goal. In this case, that would be `hP` and the type would be `P`.\n"
"\n"
"The `assumption` tactic is capable of alot more, but it will not be used in this game. You can read more about these capabilities in the right side pane documentation\n"
"\n"
"The advantage of the `assumption` tactic over exact is that you don't have to spell out the assumption to Lean. However, it might be clearer to explicity do so. This is the tradeoff between brevity and ..."
msgstr ""

#: Game.Levels.LogicAlternative.L02_constructorNotation
msgid "The `‚ü®‚ü©` notation"
msgstr ""

#: Game.Levels.LogicAlternative.L02_constructorNotation
msgid "`‚ü®‚ü©` is another way to introduce `‚àß`.\n"
"Consider the following proof state:\n"
"```\n"
"h1 : P\n"
"h2 : Q\n"
"```\n"
"If your and introduction looks like the following:\n"
"```\n"
"And.intro h1 h2\n"
"```\n"
"then the equivalent `‚ü®‚ü©` syntax is:\n"
"```\n"
"‚ü®h1,h2‚ü© \n"
"```\n"
"Both notations produce/construct an object of type `P ‚àß Q`"
msgstr ""

#: Game.Levels.LogicAlternative.L02_constructorNotation
msgid ""
msgstr ""

#: Game.Levels.LogicAlternative.L03_Or
msgid "Or"
msgstr ""

#: Game.Levels.LogicAlternative.L03_Or
msgid "In this level, you will learn about the `Or` logical connective.\n"
"\n"
"# truth table\n"
"```\n"
"| P | Q | P ‚à® Q  |\n"
"|---|---|--------|\n"
"| T | T |   T    |\n"
"| T | F |   T    |\n"
"| F | T |   T    |\n"
"| F | F |   F    |\n"
"```\n"
"\n"
"From the truth table, we can see that if one of `P`,`Q` is true then `P ‚à® Q` is true. \n"
"Therefore, if we have `P ‚à® Q` as our goal, it is enough to prove `P` or to prove `Q`.\n"
"This is exactly what the `left` and `right` tactic does. \n"
"The `left` tactic transforms our goal from `P ‚à® Q` to `P` and similarily for the `right` tactic. This is because Lean understands that if `P` is true, then `P ‚à® Q` is true."
msgstr ""

#: Game.Levels.LogicAlternative.L03_Or
msgid "Use either `left` or `right`"
msgstr ""

#: Game.Levels.LogicAlternative.L03_Or
msgid "`p` is exactly the goal"
msgstr ""

#: Game.Levels.LogicAlternative.L03_Or
msgid "`q` is exactly the goal"
msgstr ""

#: Game.Levels.LogicAlternative.L03_Or
msgid ""
msgstr ""

#: Game.Levels.LogicAlternative.L04_apply
msgid "`apply` tactic"
msgstr ""

#: Game.Levels.LogicAlternative.L04_apply
msgid "The `apply` tactic takes an implication as its argument where the conclusion of the implication matches the goal.\n"
"Here is how `apply` 'thinks', and how it transforms the proof state:\n"
"Since we can conclude the conclusion of the implication which is also our goal from its premise, our new goal becomes the premise. In a sense, the `apply` tactic sets up modus ponens for you and the missing piece is proving the premise of the implication\n"
"\n"
"remember the X Y problem"
msgstr ""

#: Game.Levels.LogicAlternative.L04_apply
msgid ""
msgstr ""

#: Game.Levels.LogicAlternative.L04_apply
msgid "The apply tactic takes a proof of a general statement or implication, tries to match the conclusion with the current goal,\n"
"and leaves the hypotheses, if any, as new goals. If the given proof matches the goal exactly (modulo definitional equality),\n"
"you can use the exact tactic instead of apply. So, all of these work:"
msgstr ""

#: Game.Levels.LogicAlternative
msgid "This world will have the same exercises as the previous `Logic` world, but the difference will be the tactics used to solve them, which will change the reasoning process."
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L01_whydisjoint
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L01_whydisjoint
msgid "We can think of the set of knights and the set of knaves, denoted `Knights`, `Knaves` respectively. A set is a collection of 'entities' with a specified property. The set `Knight` would be the set of inhabitants of the island that are knights i.e satisfying the property of always telling the truth, the set `Knave` being the set of inhabitatns of the island that are knives i.e the ones that always lie. \n"
"\n"
"Note that in Lean, `Set K` means the set of objects of type `K`( this can be changed to something clearer?? think of clarity benefits of a change). Note that in each level, we will be considering two or three inhabitants of the island and will not be reasoning about the sets themselves but about these fixed inhabitants named `A`, `B`, `C`.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"/-\n"
"since this is a repeated pattern in this world, we introduce it as its own level. You need to show that having two sets being disjoint (i.e sharing no common element) and having a common element is a contradiction. This is not an obvious contradiction( like p , ¬¨p) for the `contradiction` tactic to work. Some work needs to be done to get to that point.\n"
"Note the theorem:\n"
"```\n"
"Set.not_mem_empty.{u} {Œ± : Type u} (x : Œ±) : x ‚àâ ‚àÖ\n"
"```\n"
"An object of this type is given to you as an assumption in this level for your convenience and this you can also directly use this theorem.  can be used freely later on.\n"
"\n"
"Hint: the goal is to get something that contradicts not_mem_empty. Since x belong to Knight and Knave then it belongs to their intersection which is equal to the empty set contradiction not_mem_empty. Let's do this step by step. (Make it feel like the player discovered this:\n"
"Notice that the only information we can derive is that x is in the intersection. Do we have information about the intersection? Well yes. its empty set so x ‚àà empty set. Execute the finishing blow. \n"
"\n"
"This is a common theme when using `contradiction`, sometimes contradiction can't see the 'contradiction' and manipulating the proof state would reveal this to `contradiction`.\n"
"-/"
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L01_whydisjoint
msgid "dis22"
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L01_whydisjoint
msgid "Note that the forward direction is always true, and our assumption `h` wasn't used, but the backward direction is not always( We used `h` for that). This offers a simplification and decluttering of the proof state and will be followed from now on. The downside is an apparent loss of information, but the coming levels will show that this is not the case.\n"
"\n"
"(follow up to show that there was no loss of information)"
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L02_inleft
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L02_inleft
msgid "We will use this to prove several helpful lemmas in the context of the knights and knaves puzzle. Note that these lemmas apply to any two sets."
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L02_inleft
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L02_Knight_NotKnave
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L02_Knight_NotKnave
msgid "Note that this level is identical to the previous one except the fact that the set `left` is now called `Knight` and the set `right` is now called `Knave`. This level is to emphasize this pattern of reasoning that you will need to solve knights and knaves puzzles.\n"
"\n"
"If you are a knight, then you are definitely not a knave. Recall that knights always tell the truth and knaves always lie."
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L02_Knight_NotKnave
msgid "test"
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L02_Knight_NotKnave
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L03_inright
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L03_inright
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L03_inright
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L03_Knave_NotKnight
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L03_Knave_NotKnight
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L03_Knave_NotKnight
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L04_notinright
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L04_notinright
msgid "Remember notright_left from logic world. You can go back if you wish before proceeding with this level: link to prev level."
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L04_notinright
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L04_NotKnave_Knight
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L04_NotKnave_Knight
msgid "Before starting the riddles, some new concepts have to be clarified.\n"
"It is obvious that no one can be a knight and a knave at the same time. If some is not a knave then they are a knight.\n"
"\n"
"You need to show that having two sets being disjoint (i.e sharing no common element) and having a common element is a contradiction.\n"
"\n"
"For the contradiction \n"
"This is not an obvious contradiction (like p , ¬¨p) for the `contradiction` tactic to work. \n"
"Some work needs to be done to get to that point.\n"
"We can get that `A ‚àà ‚àÖ` and we know that\n"
"```\n"
"Set.not_mem_empty.{u} {Œ± : Type u} (x : Œ±) : x ‚àâ ‚àÖ\n"
"```\n"
"\n"
"Hint: the goal is to get something that contradicts not_mem_empty. Since x belong to Knight and Knave then it belongs to their intersection which is equal to the empty set contradiction not_mem_empty. Let's do this step by step. (Make it feel like the player discovered this:\n"
"Notice that the only information we can derive is that x is in the intersection. Do we have information about the intersection? Well yes. its empty set so x ‚àà empty set. Execute the finishing blow."
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L04_NotKnave_Knight
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.notinleft
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.notinleft
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.notinleft
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L05_NotKnight_Knave
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L05_NotKnight_Knave
msgid "Similar to the previous level"
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas.L05_NotKnight_Knave
msgid "Let's recap what we have proven in the last four levels.\n"
"\n"
"Given the following proof state:\n"
"```\n"
"(Knight : Set K ) (Knave : Set K)\n"
"(h : Knight ‚à© Knave = ‚àÖ )\n"
"(h'' : ‚àÄ (x: K), x ‚àà Knight ‚à® x ‚àà Knave)\n"
"```\n"
"\n"
"\n"
"We can conclude the following implications:\n"
"A ‚àà Knight ‚Üí A ‚àâ Knave  \n"
"A ‚àâ Knave ‚Üí A ‚àà Knight\n"
"which can be combined into: A ‚àà Knight ‚Üî A ‚àâ Knave\n"
"Similarly for the other two levels, we can conclude A ‚àâ Knight ‚Üî A ‚àà Knave\n"
"\n"
"These two theorems will be very useful in the following world.\n"
"\n"
"------------------------\n"
"\n"
"We have proven:\n"
"```\n"
"(Knight : Set K) (Knave : Set K)\n"
"(h : Knight ‚à© Knave = ‚àÖ )\n"
"(h' : A ‚àà Knight)\n"
"  : A ‚àâ Knave \n"
"\n"
"\n"
"\n"
"(Knight : Set K ) (Knave : Set K)\n"
"(h : Knight ‚à© Knave = ‚àÖ )\n"
"(h' : ¬¨ (B ‚àà Knave))\n"
"(h'' : ‚àÄ (x: K), x ‚àà Knight ‚à® x ‚àà Knave)\n"
"  :  B ‚àà Knight := by\n"
"```"
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas
msgid "Knights and Knaves, lemmas"
msgstr ""

#: Game.Levels.KnightsAndKnavesLemmas
msgid "We will introduce the knights and knaves puzzle here, and you will have to prove basic but important lemmas in the upcoming levels that will be used to solve the actual puzzles in the next world.\n"
"\n"
"Let `Knight` be the set of inhabitants that are knights, i.e always tell the truth.\n"
"Let `Knave` be the set of inhabitants that are knaves, i.e always lies.\n"
"In a proof state, this would look like:\n"
"```\n"
"Knight : Finset Inhabitant\n"
"Knave : Finset Inhabitant\n"
"```\n"
"`Knight` is a finite set where its elements are of type `Inhabitant` and they poses the propery of always telling the truth.\n"
"`Knave` is a fininte set there its elements are of type `Inhabitant` and they poses the property of always lying.\n"
"The statement `A ‚àà Knight` should be understood as 'A IS Knight' i.e 'A' always tells the truth. Then `A` is not a knave, i.e `A ‚àâ Knave`.\n"
"Similarly, the statement `A ‚àâ Knight` should be understood as 'A ISNOT Knight'. What is `A` then? `A` has to be a knave.\n"
"The same reasoning applies to `x ‚àà Knave`, `x ‚àâ Knave` and to any set.\n"
"\n"
"More formally,.............\n"
"The setting is an island in which its inhabitatnts satisfy the following properties:\n"
"- Every inhabitant of the island is either a knight or a knave which is expressed as : A ‚àà Knight ‚à® A ‚àà Knave.\n"
"- 'Knights' always tell the truth and 'Knaves' always lie. Clearly, no inhabitant can be both a knight and a knave. So the intersection of bothe sets is empty. Knight ‚à© Knave = ‚àÖ. The two sets Knight Knave are disjoint.\n"
"The objective is to conclude who is a knight and who is a knave, based on the statements of several inhabitants. This will be done using logical reasoning. Every inhabitant will make at most one statement.\n"
"\n"
"How should this be translated into Logic? Well, this is what the upcoming levels will focus on before transitioning to proving some important properties. \n"
"\n"
"Every mentioned here will be thoroughly formalized and explained in this world, and the paragraph in question in that level will be directly referenced. Every idea is left to be elaborated and formalised in the levels of this world."
msgstr ""

#: Game.Levels.KnightsAndKnaves.L01_IamKnave
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.L01_IamKnave
msgid "We have an inhabitant A which says the following statement: \n"
"A : 'I am a knave.'\n"
"\n"
"Merely uttering this statement is a contradiction. This is equivalent to the liars paradox(https://en.wikipedia.org/wiki/Liar_paradox). A saying 'I am a knave' is like A saying 'I am a liar' or 'I am lying'. \n"
"\n"
"If A were telling the truth(i.e a knight), then A would be lying which is a contradiction. \n"
"\n"
"Similarly if A were lying(i.e a knave) then A would be telling the truth. \n"
"\n"
"Regardless of what A is, we fall into contradiction. The proof will take all cases for A, which are either the fact of always telling the truth(Knight) or always lying(Knave) and will show this contradiction(Knave) and will show this contradiction.\n"
"\n"
"Remember that is either a knight or a knave, represented by `h1` , and our reasoning was taking every case and showing that we reach the same conclusion in both. This is a proof by cases.\n"
"\n"
"For this, we need the `cases` tactic. Try `cases h1` and see what happens"
msgstr ""

#: Game.Levels.KnightsAndKnaves.L01_IamKnave
msgid "Notice that `h1` is now replaced by `h_1`, and we have two goals to prove instead of one. The difference between each is that in the first, A is a knight and in the second A is a knave.  \n"
"\n"
"Use the fact that A is a knight to conclude..."
msgstr ""

#: Game.Levels.KnightsAndKnaves.L01_IamKnave
msgid "So now we have that A is a knight, A is a knave. But this contradicts the fact that these two sets are disjoint."
msgstr ""

#: Game.Levels.KnightsAndKnaves.L01_IamKnave
msgid "Notice that h_1 is now `A ‚àà Knave`. There are multiple ways to get a contradiction here. Either by concluding `A ‚àâ Knave` from `stAn` or by concluding `A ‚àà Knight` from `stA` which would be identical."
msgstr ""

#: Game.Levels.KnightsAndKnaves.L01_IamKnave
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob26
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob26
msgid "Three of the inhabitants A, B, and C were standing together in a garden. \n"
"A stranger passed by and asked A, 'Are you a knight or a knave?' A answered, but rather indistinctly, so the stranger could not make out what he said. The stranger than asked B, 'What did A say?' B replied, 'A said that he is a knave.' At this point the third man, C, said, 'Don't believe B; he is lying!' \n"
"The question is, what are B and C?\n"
"\n"
"First of all, lets simplify the statements. C's statement can be simplified to 'B is a knave.'\n"
"\n"
"The formalization is given. Note that for the statement of B, if B where telling the truth then A indeed made such a statement which is the statement 'I am a Knave' and the formalization of that is 'A ‚àà Knight ‚Üî A ‚àà Knave'. Use IamKnave."
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob26
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob33
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob33
msgid "Suppose A says, 'I am a knave, but B is not.' \n"
"What are A and B?"
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob33
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob28
msgid "lev 2"
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob28
msgid "In this problem, there are only two people, A and B, each of \n"
"whom is either a knight or a knave. A makes the following \n"
"statement: 'At least one of us is a knave.' \n"
"What are A and B?"
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob28
msgid "."
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob31
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob31
msgid "Again we have three people, A, B, C, each of whom is either \n"
"a knight or a knave. A and B make the following statements: \n"
"A: All of us are knaves. \n"
"B: Exactly one of us is a knight. \n"
"What are A, B, C?"
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob31
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob32
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob32
msgid "Suppose instead, A and B say the following: \n"
"A: All of us are knaves. \n"
"B: Exactly one of us is a knave. \n"
"Can it be determined what B is? Can it be determined what \n"
"C is?"
msgstr ""

#: Game.Levels.KnightsAndKnaves.prob32
msgid ""
msgstr ""

#: Game.Levels.KnightsAndKnaves
msgid "Knights And Knaves"
msgstr ""

#: Game.Levels.KnightsAndKnaves
msgid "It is recommended to solve the problems in this world while in editor mode, though you have the choice not to.\n"
"\n"
"give an example of formalization process i.e translating the statements to iff and the intuition behind that. the problem has already been presented in knights and knaves lemmas and the basic notleft_right etc.. lemmas\n"
"\n"
"-- maybe provide a generic example in knights and knaves lemmas world where A : 'some statement' ......\n"
"The process of representing knights and knaves problem will be discussed here using the first problem in this as an example.\n"
"Imagine the island has an inhabitant `A` which says the following statement,\n"
"A : 'I am a knave'\n"
"Remember that if `A` were a knight, then `A`'s statement is true. this can be translated to an implication: `A ‚àà Knight ‚Üí A ‚àà Knave`\n"
"If `A`'s statement were true, then `A` is telling the truth so `A` must be a knight. `A ‚àà Knave ‚Üí A ‚àà Knight`\n"
"The two can be combined as `A ‚àà Knight ‚Üî A ‚àà Knave`"
msgstr ""

#: Game.Levels.KnightsAndKnaves2
msgid "Knights and Knaves, second approach"
msgstr ""

#: Game
msgid "Reasoning"
msgstr ""

#: Game
msgid "This is a gamification of mathematical proofs. Every level has a `Goal`, which is what you are trying to prove. Closing the `Goal` means you have proved the theorem and there is nothing else to do.\n"
"\n"
"You will use the Lean theorem prover, and its mathematical library mathlib.\n"
"\n"
"# Right Side Pane\n"
"Let's explain what's going on in the right side pane.\n"
"\n"
"Anything you click on will display an overview and some examples. This will be available to you at all times when working on the levels. Refer back to it whenever you need to.\n"
"\n"
"Anything new tactic, theorem, or definition introduced in a level will be highlighted in a yellow color.\n"
"## Tactics\n"
"In this puzzle game, you will use tactics to manipulate the `Goal` and close it, essentially proving the `Goal`. Tactics will be incrementally introduced, and tactics that haven't been introduced yet will have a lock icon which means you can't use them yet. \n"
"\n"
"## Definitions\n"
"The point of this game is not just to showcase ***Lean***, but also to learn some mathematics. Relevant definitions will be displayed here\n"
"\n"
"## Theorems\n"
"Here is listed theorems to use throughout the levels. Some you would have proved in previous levels and others are presented for you to use but without proof.\n"
"\n"
"# Level Structure\n"
"Within every level, the `Objects`, `Assumptions`, and `Goal` for the current level. This is called the initial proof state. There will also be a text input to execute tactics accordingly.\n"
"***Lean*** tracks the proof state as you execute tactics. \n"
"You will execute tactics one by one until Lean tells you that have closed the goal.\n"
"\n"
"# More info\n"
"You can click the hamburger menu in the top right then 'Game Info' for more information.\n"
"\n"
"# Terminlogy"
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Many technical details have been skipped for the sake of not getting bogged down with Lean and its mathematical library mathlib, but focus on the aspects of reasoning and proof. You can visit https://leanprover-community.github.io/mathlib4_docs/ for more information about any tactic used by searching `Mathlib.Tactic.tacticname`, and theorems.\n"
"\n"
"Zulip chat for lean has been a very useful resource to resolve issues when formalizing the exercises, you can visit it and ask questions in the '#new members' stream. You can also view messages without signing up. There are other streams dedicated to various topics you can check out as well. \n"
"\n"
"# Editor Mode \n"
"## copy and paste your solutions somewhere else\n"
"Some levels will force you to use editor mode. Editor mode is necessary for multiline tactics. Moreover, you should get used to it because it mimics a vscode Lean environment which is the most common way Lean is run.\n"
"\n"
"To access editor mode, click on the icon to the left of the hamburger menu in the top right.\n"
"You can copy and paste your solutions if you have Lean setup, or you can use the lean web editor: https://live.lean-lang.org/ if you want to experiment with your solutions outside the lean game.\n"
"Make sure to have `import Mathlib.Tactic` at the top and then to copy whats above the editor area which is the problem statement. Each problem statement is of the form `example ... :=  by` and after that is where your solution should go.\n"
"\n"
"## vscode like environment\n"
"Hovering over things will give you useful information.\n"
"# Links \n"
"https://leanprover-community.github.io/\n"
"https://lean-lang.org/\n"
"https://lean-lang.org/documentation/\n"
"\n"
"https://github.com/leanprover-community/mathlib4\n"
"\n"
"https://leanprover.zulipchat.com/\n"
"https://zulip.com/case-studies/lean/\n"
"\n"
"# how to navigate documentation\n"
"You can use https://leanprover-community.github.io/mathlib4_docs/ for Lean and mathlib related documentation. You can see 'Lean', 'Mathlib' in the left side pane, clicking on either will expand them. A more effective way of finding what you want is using the search feature of this page , using 'Go To Definition' if you have vscode setup for Lean and mathlib, or hovering over things to get more information\n"
"\n"
"# Rules\n"
"You can relax the rules.\n"
"\n"
"This is not recommended for people who have never heard about Lean before. Moreover, relaxing the rules would ruin the coherence and structured/guided experience you would have when playing the game normally. If that is what you are looking for, then don't relax the rules."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
