
section
variable (α : Type) (p q : α → Prop)

example : (∀ x, p x ∧ q x) ↔ (∀ x, p x) ∧ (∀ x, q x) := by {
  constructor
  · intro h
    constructor 
    · intro x
      exact (h x).left
    · intro x         
      exact (h x).right

  · intro h
    intro x
    exact And.intro (h.left x) (h.right x)
}
example : (∀ x, p x → q x) → (∀ x, p x) → (∀ x, q x) := by {
  intro h
  intro h' 
  intro x 
  exact (h x) (h' x)
}

example : (∀ x, p x) ∨ (∀ x, q x) → ∀ x, p x ∨ q x := by {
  intro h
  intro x
  rcases h with h1 | h2 
  · left
    exact h1 x
  · right
    exact h2 x
}

end

section
variable (α : Type) (p q : α → Prop)
variable (r : Prop)

example : α → ((∀ x : α, r) ↔ r) := by {
  intro h
  constructor
  · intro h'
    exact h' h
  · intro h'
    intro h''
    assumption
}

example : (∀ x, p x ∨ r) ↔ (∀ x, p x) ∨ r := by {
  constructor 
  · intro h
    rcases Classical.em r with h1 | h2
    · right
      assumption

    · left 
      intro x
      rcases h x with h' | h'
      · exact h'
      · contradiction
      
    --rcases h with h | h  
  · intro h
    rcases h with h | h
    · intro x
      left
      exact h x
    · intro x 
      right 
      exact h
}
example : (∀ x, r → p x) ↔ (r → ∀ x, p x) := by {
  constructor
  · intro h
    intro h'
    intro x
    exact (h x) h'
  · intro h
    intro x
    intro h' 
    exact (h h') x 
}
end

